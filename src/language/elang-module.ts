import { Module, inject } from "langium";
import {
  createDefaultModule,
  createDefaultSharedModule,
  type DefaultSharedModuleContext,
  type LangiumServices,
  type LangiumSharedServices,
  type PartialLangiumServices,
} from "langium/lsp";
import { ElangLinker } from "./elang-linker.js";
import { ElangScopeComputation, ElangScopeProvider } from "./elang-scope.js";
import { ElangValidator, registerValidationChecks } from "./elang-validator.js";
import {
  ElangGeneratedModule,
  ElangGeneratedSharedModule,
} from "./generated/module.js";
import { ElangCompletionProvider } from "./lsp/completion-provider.js";
import { ElangHoverProvider } from "./lsp/hover-provider.js";

/**
 * Declaration of custom services - add your own service classes here.
 */
export type ElangAddedServices = {
  validation: {
    ElangValidator: ElangValidator;
  };
};

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type ElangServices = LangiumServices & ElangAddedServices;

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const ElangModule: Module<
  ElangServices,
  PartialLangiumServices & ElangAddedServices
> = {
  validation: {
    ElangValidator: () => new ElangValidator(),
  },
  references: {
    ScopeComputation: (services) => new ElangScopeComputation(services),
    ScopeProvider: (services) => new ElangScopeProvider(services),
    // References: (services) => new ElangReferences(services),
    Linker: (services) => new ElangLinker(services),
  },
  lsp: {
    HoverProvider: (services) => new ElangHoverProvider(services),
    CompletionProvider: (services) => new ElangCompletionProvider(services),
  },
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createElangServices(context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices;
  Elang: ElangServices;
} {
  const shared = inject(
    createDefaultSharedModule(context),
    ElangGeneratedSharedModule
  );
  const Elang = inject(
    createDefaultModule({ shared }),
    ElangGeneratedModule,
    ElangModule
  );
  shared.ServiceRegistry.register(Elang);
  registerValidationChecks(Elang);
  return { shared, Elang };
}
