{"cells":[{"kind":1,"language":"markdown","value":"# Primitives\n\ne-lang has the following primitive types:\n\n- `number`\n- `text`\n-  `boolean`\n- `number_[UnitFamily]`:  Represents a measurement with a related numeric value and a `unit` belonging to a `unit_family` (see [Units](./units.elnb))"},{"kind":2,"language":"e-lang","value":"domain Primitives\n\nconst aNumber: number = 10\nprint aNumber\n\nconst aText: text = \"Hello World\"\nprint aText\n\nconst aBoolean: boolean = true\nprint aBoolean\n\nunit_family Length {\n    unit m: metre\n}\n\nunit_family Time {\n    unit s: second\n}\n\nconst aLength: number_[Length] = 10_[m]\nprint aLength\n\nconst aTime: number_[Time] = 10_[s]\nprint aTime"},{"kind":1,"language":"markdown","value":"## Inference\n\nIf the type of a variable is not declared, it will be inferred based on its value."},{"kind":2,"language":"e-lang","value":"domain Inference\n\nconst infNumber = 5\nprint infNumber + 10\n\nconst infText = \"Inferred\"\nprint infText + \" World\" \n\nconst infBoolean = true\nprint infBoolean and false\n\nconst infModel = {\n    id: 1,\n    name: \"Inferred Model\"\n}\n\nprint infModel"},{"kind":1,"language":"markdown","value":"# Lists\n\nLists of other types can be created using the `list` keyword after the type.\n\nAs with other programming language, the items of the list can be accessed with the square brackets syntax."},{"kind":2,"language":"e-lang","value":"domain Lists\n\nconst listOfText: text list = ['Hello', 'World']\nprint listOfText\n\nconst listOfNumbers: number list = [1, 2, 3]\nprint listOfNumbers\n\nconst listOfBooleans: boolean list = [true, false]\nprint listOfBooleans\n\nmodel Model {\n    id: number\n    name: text\n}\n\nconst listOfModels: Model list = [\n    {id: 1, name: 'Model 1'},\n    {id: 2, name: 'Model 2'}\n]\nprint listOfModels[1]\n\nunit_family Length {\n    unit m: metre\n}\n\nconst listOfMeasurements: number_[Length] list = [1_[m], 2_[m], 3_[m], 4_[m]]\nprint listOfMeasurements\n\nmodel Model1 {\n    id: number\n    name: text\n}\n\nmodel Model2 {\n    id: number\n    name: text\n    switch: boolean\n}\n\nconst listOfModels: (Model1 or Model2) list = [\n    {id: 1, name: 'Model 1'},\n    {id: 2, name: 'Model 2'},\n    {id: 3, name: 'Model 3', switch: true}\n]\n\nprint listOfModels[2]"},{"kind":1,"language":"markdown","value":"# Unions\n\nMulti-type unions can be declared with the `or` keyword"},{"kind":2,"language":"e-lang","value":"domain Unions\n\nvar aUnion: number or text = 'Ten'\nprint aUnion\n\naUnion = 10\nprint aUnion\n\nconst listOfUnions: (number or text or boolean) list = [10, 'Ten', true]\nprint listOfUnions"}]}