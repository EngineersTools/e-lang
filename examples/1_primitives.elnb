{"cells":[{"kind":1,"language":"markdown","value":"# Primitives\n\nelang has the following primitive types:\n\n- `number`\n- `text`\n-  `boolean`\n- `number_[UnitFamily]`:  Represents a measurement with a related numeric value and a `unit` belonging to a `unit_family` (see [Units](./units.elnb))"},{"kind":2,"language":"elang","value":"domain Primitives\r\n\r\nconst aNumber: number = 10\r\nprint aNumber\r\n\r\nconst aText: text = \"Hello World\"\r\nprint aText\r\n\r\nconst aBoolean: boolean = true\r\nprint aBoolean\r\n\r\nunit_family Length {\r\n    unit m: metre\r\n}\r\n\r\nunit_family Time {\r\n    unit s: second\r\n}\r\n\r\nconst aLength: number_[Length] = 10_[m]\r\nprint aLength\r\n\r\nconst aTime: number_[Time] = 10_[s]\r\nprint aTime"},{"kind":1,"language":"markdown","value":"## Inference\n\nIf the type of a variable is not declared, it will be inferred based on its value."},{"kind":2,"language":"elang","value":"domain Inference\r\n\r\nconst infNumber = 5\r\nprint infNumber + 10\r\n\r\nconst infText = \"Inferred\"\r\nprint infText + \" World\" \r\n\r\nconst infBoolean = true\r\nprint infBoolean and false\r\n\r\nconst infModel = {\r\n    id: 1,\r\n    name: \"Inferred Model\"\r\n}\r\nprint infModel"},{"kind":1,"language":"markdown","value":"# Lists\n\nLists of other types can be created using the `list` keyword after the type.\n\nAs with other programming language, the items of the list can be accessed with the square brackets syntax."},{"kind":2,"language":"elang","value":"domain Lists\r\n\r\nconst listOfText: text list = ['Hello', 'World']\r\nprint listOfText\r\n\r\nconst listOfNumbers: number list = [1, 2, 3]\r\nprint listOfNumbers\r\n\r\nconst listOfBooleans: boolean list = [true, false]\r\nprint listOfBooleans\r\n\r\nmodel Model {\r\n    id: number\r\n    name: text\r\n}\r\n\r\nconst listOfModels: Model list = [\r\n    {id: 1, name: 'Model 1'},\r\n    {id: 2, name: 'Model 2'}\r\n]\r\nprint listOfModels[1]\r\n\r\nunit_family Length {\r\n    unit m: metre\r\n}\r\n\r\nconst listOfMeasurements: number_[Length] list = [1_[m], 2_[m], 3_[m], 4_[m]]\r\nprint listOfMeasurements"},{"kind":1,"language":"markdown","value":"# Unions\n\nMulti-type unions can be declared with the `or` keyword"},{"kind":2,"language":"elang","value":"domain Unions\r\n\r\nvar aUnion: number or text = 10\r\nprint aUnion\r\naUnion = 'Ten'\r\nprint aUnion\r\n\r\nconst listOfUnions: (number or text) list = [10, 'Ten']\r\nprint listOfUnions"}]}