{"cells":[{"kind":1,"language":"markdown","value":"# Hello World\n\nIt is tradition that the introduction to any programming language starts with the `Hello Wold` example.\n\nIn `elang`, you can print the value of an expression on the screen using the `print` keyword.\n\nAs a minimum, every `elang` program starts with the declaration of the engineering domain it is designed for and it is declared with the `domain` keyword.\n\nBelow is the `Hello World` example written in `elang`"},{"kind":2,"language":"e-lang","value":"domain HelloWorld\n\nprint \"Hello, World!\""},{"kind":1,"language":"markdown","value":"## Printing variables and concatenation\n\n`elang` uses the overloaded `+` operator to perform a sum as well as concatenating text and variable values to print them to the output."},{"kind":2,"language":"e-lang","value":"domain Concatenation\n\nprint \"Hello, \" + \"World!\"\n\nconst world = \"World!\"\n\nprint \"Hello, \" + world"},{"kind":1,"language":"markdown","value":"## ELang Files\n\n`elang` is written in plain text files with the extension `.el`.\n\nIf you are reading the current file on a code editor like `VS Code`, the other type of file that runs `elang` code are the `elang-notebooks`, which are denoted by the extension `.elnb`.\n\nNotebook files are a convenient way of explaining code and running it using the in-built `elang` inerpreter.\n\n## Examples\n\nI this `examples` directory you will find a range of `elang` notebooks that demonstrate basic concepts of the language.\n\n- Primitives [1_primitives.elnb](./1_primitives.elnb)\n- Units [2_units.elnb](./2_units.elnb)\n- Models [3_models.elnb](./3_models.elnb)\n- Expressions [4_expressions.elnb](./4_expressions.elnb)\n- Formulas [5_formulas.elnb](./5_formulas.elnb)\n- Procedures [6_procedures.elnb](./6_procedures.elnb)\n- Types [7_types.elnb](./7_types.elnb)\n- Lists [8_lists.elnb](./8_lists.elnb)\n"}]}