{"cells":[{"kind":1,"language":"markdown","value":"# Lists\n\nLists in elang are created by appending the keyword `list` to another type. This will denote a list with items of that type.\n"},{"kind":2,"language":"e-lang","value":"domain ListTypes\n\nconst listOfNumbers: number list = [1, 2, 3, 4, 5]\nprint \"listOfNumbers: \" + listOfNumbers\n\nconst listOfText: text list = ['a', 'b', 'c', 'd', 'e']\nprint \"listOfText: \" + listOfText\n\nconst listOfBooleans: boolean list = [true, false, true, false]\nprint \"listOfBooleans: \" + listOfBooleans\n\nconst listOfLists: (number list) list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint \"listOfLists: \" + listOfLists\n\nconst listOfUnion: (number or text) list = [1, 'a', 2, 'b', 3, 'c']\nprint \"listOfUnion: \" + listOfUnion\n\nconst inferredList = [1, 2, 3, 4, 5]\nprint \"inferredList: \" + inferredList"},{"kind":1,"language":"markdown","value":"## Accessing list elements\n\nTo access the value of any item in the list use `[index]` after the name of the list, where index is a positive integer starting from zero (0).\n\nIt the `value` of index is higher than the number of items in the list, an error will be produced. The maximum `index` in a list will always be the number of elements in the list minus one (1). For example, a list with 10 elements will have a maximum `index` of 9.\n\nAlso, the `index` expression can be result of a calculation in some other part of the program."},{"kind":2,"language":"e-lang","value":"domain ListAccess\n\nconst listOfNumbers: number list = [1, 2, 3, 4, 5]\n\nprint \"listOfNumbers[0]: \" + listOfNumbers[0]\nprint \"listOfNumbers[4]: \" + listOfNumbers[4]\n\n// This will produce an error\n// Error: Index out of range. The list 'listOfNumbers' has less than 6 elements @10:30\n// print \"listOfNumbers[5]: \" + listOfNumbers[5]\n\nconst calculatedIndex = 2 + 1\nprint \"calculatedIndex: \" + calculatedIndex\nprint \"listOfNumbers[calculatedIndex]: \" + listOfNumbers[calculatedIndex]\n\nformula dynamicIndex() returns number {\n    return 3\n}\nprint \"listOfNumbers[dynamicIndex()]: \" + listOfNumbers[dynamicIndex()]"},{"kind":1,"language":"markdown","value":"## Assignment\n\nIf the value of a list is not assigned when declared, it means the list will be mutated later and needs to be declared with the `var` keyword.\n\nIf the list is initialised with an empty list `[]`, a type has to be included in the declaration. Otherwise the later assignment of elements will produce an error.\n\nIf a value is assigned to a list element with an `index` that is larger than the number of elements in the list, the elements betweent the last current element and the new one will be filled with the value `null`."},{"kind":2,"language":"e-lang","value":"domain ListAssignment\n\nvar emptyList: number list = []\nprint \"emptyList: \" + emptyList\n\nemptyList[0] = 1\nprint \"emptyList: \" + emptyList\nemptyList[5] = 2\nprint \"emptyList: \" + emptyList\nemptyList[2] = 3\nprint \"emptyList: \" + emptyList\n\nprint \"emptyList[4]: \" + emptyList[4]\nprint \"Should be true: \" + emptyList[4] == null"},{"kind":1,"language":"markdown","value":"## Modifying lists\n\n`elang` provides three in-built formulas that manipulate lists.\n\n### listCount()\n\nThe `listCount()` formula takes a list as an input and returns the number of elements in the list.\n\nLike any other expression, the result of this formula can be assigned to a variable for further use in the program."},{"kind":2,"language":"e-lang","value":"domain ListCount\n\nconst listOfNumbers: number list = [1, 2, 3, 4, 5]\n\nprint \"listCount(listOfNumbers): \" + listCount(listOfNumbers)\n\nconst numberOfItems = listCount(listOfNumbers)\n\nprint \"numberOfItems: \" + numberOfItems"},{"kind":1,"language":"markdown","value":"### listAdd(list, element) and listRemove(list, index?)\n\nThe `listAdd(list, element)` and `listRemove(list, index?)` formulas return a list with elements appended and removed respectively.\n\nThe `listAdd(list, element)` formula takes two arguments:\n- `list` is the list that will be used as a basis for the add operation, and\n- `element` is the new element that will be appended at the end of the list. The type of this item has to be compatible with the types of the list, `elang` will throw an error otherwise.\n\nThis formula returns a new `list` with the added `element`.\n\nThe `listRemove(list,index?)` formula takes one mandatory argument and one optional argument:\n- The `list` argument is mandatory and is the list from which the element will be removed\n- The `index` argument is an optional argument that contains a number. This represents the index of the element that should be removed from the list. If the argument is absent, the formula will remove the last element of the list. Also, if the index is larger than the size of the list, no `element` will be removed and the same `list` will be returned.\n\nThis formula returns a new `list` without the removed element removed at `index`.\n\n### Immutability\n\nBoth of these formulas return a new `list` and do not modify the `list` that was used as an input."},{"kind":2,"language":"e-lang","value":"domain ListAddAndRemove\n\nconst listOfNumbers: number list = [1, 2, 3, 4, 5]\n\nprint \"listOfNumbers: \" + listOfNumbers\n\nprint \"listAdd(listOfNumbers, 6): \" + listAdd(listOfNumbers, 6)\nprint \"listOfNumbers: \" + listOfNumbers\n\n// Remove the last element\nprint \"listRemove(listOfNumbers): \" + listRemove(listOfNumbers)\nprint \"listOfNumbers: \" + listOfNumbers\n\n// Remove the first element\nprint \"listRemove(listOfNumbers, 0): \" + listRemove(listOfNumbers, 0)\nprint \"listOfNumbers: \" + listOfNumbers\n\n// Remove the third element (index = 2)\nprint \"listRemove(listOfNumbers, 2): \" + listRemove(listOfNumbers, 2)\nprint \"listOfNumbers: \" + listOfNumbers\n\n// The index (5) is larger than the list, the same list is returned\nprint \"listRemove(listOfNumbers, 5): \" + listRemove(listOfNumbers, 5)"}]}