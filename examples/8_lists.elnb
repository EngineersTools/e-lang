{"cells":[{"kind":1,"language":"markdown","value":"# Lists\n\nLists in elang are created by appending the keyword `list` to another type. This will denote a list with items of that type.\n"},{"kind":2,"language":"e-lang","value":"domain ListTypes\n\nconst listOfNumbers: number list = [1, 2, 3, 4, 5]\nprint \"listOfNumbers: \" + listOfNumbers\n\nconst listOfText: text list = ['a', 'b', 'c', 'd', 'e']\nprint \"listOfText: \" + listOfText\n\nconst listOfBooleans: boolean list = [true, false, true, false]\nprint \"listOfBooleans: \" + listOfBooleans\n\nconst listOfLists: (number list) list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint \"listOfLists: \" + listOfLists\n\nconst listOfUnion: (number or text) list = [1, 'a', 2, 'b', 3, 'c']\nprint \"listOfUnion: \" + listOfUnion\n\nconst inferredList = [1, 2, 3, 4, 5]\nprint \"inferredList: \" + inferredList"},{"kind":1,"language":"markdown","value":"## Accessing list elements\n\nTo access the value of any item in the list use `[index]` after the name of the list, where index is a positive integer starting from zero (0).\n\nIt the `value` of index is higher than the number of items in the list, an error will be produced. The maximum `index` in a list will always be the number of elements in the list minus one (1). For example, a list with 10 elements will have a maximum `index` of 9.\n\nAlso, the `index` expression can be result of a calculation in some other part of the program."},{"kind":2,"language":"e-lang","value":"domain ListAccess\n\nconst listOfNumbers: number list = [1, 2, 3, 4, 5]\n\nprint \"listOfNumbers[0]: \" + listOfNumbers[0]\nprint \"listOfNumbers[4]: \" + listOfNumbers[4]\n\n// This will produce an error\n// Error: Index out of range. The list 'listOfNumbers' has less than 6 elements @10:30\n// print \"listOfNumbers[5]: \" + listOfNumbers[5]\n\nconst calculatedIndex = 2 + 1\nprint \"calculatedIndex: \" + calculatedIndex\nprint \"listOfNumbers[calculatedIndex]: \" + listOfNumbers[calculatedIndex]\n\nformula dynamicIndex() returns number {\n    return 3\n}\nprint \"listOfNumbers[dynamicIndex()]: \" + listOfNumbers[dynamicIndex()]"},{"kind":1,"language":"markdown","value":"## Assignment\n\nIf the value of a list is not assigned when declared, it means the list will be mutated later and needs to be declared with the `var` keyword.\n\nIf the list is initialised with an empty list `[]`, a type has to be included in the declaration. Otherwise the later assignment of elements will produce an error.\n\nIf a value is assigned to a list element with an `index` that is larger than the number of elements in the list, the elements betweent the last current element and the new one will be filled with the value `null`."},{"kind":2,"language":"e-lang","value":"domain ListAssignment\n\nvar emptyList: number list = []\nprint \"emptyList: \" + emptyList\n\nemptyList[0] = 1\nprint \"emptyList: \" + emptyList\nemptyList[5] = 2\nprint \"emptyList: \" + emptyList\nemptyList[2] = 3\nprint \"emptyList: \" + emptyList\n\nprint \"emptyList[4]: \" + emptyList[4]\nprint \"Should be true: \" + emptyList[4] == null"}]}