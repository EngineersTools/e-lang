{"cells":[{"kind":1,"language":"markdown","value":"# Types\n\nElang is a statically typed language\n\n"},{"kind":2,"language":"elang","value":"domain Types\n\n// model GrandParentModel {\n//     name: text\n// }\n\n// model ParentModel extends GrandParentModel {\n//     id: text\n// }\n\n// model PropertyModel {\n//     name: text\n//     value: number\n// }\n\n// model SimpleModel extends ParentModel {\n//     textProperty: text\n//     numberProperty: number\n//     properyProperty: PropertyModel\n//     optionalProperty?: boolean\n//     override name: text\n//     override id: boolean\n// }\n\n// // print SimpleModel\n\n// const textConst = 'text'\n// var textVariable: text = '2 + 1'\n// print textVariable\n// const numberConst: number = 1 + 2\n// print numberConst\n// const booleanConst: boolean = true\n// const modelConst: SimpleModel = {\n//     id: true,\n//     name: 'name',\n//     textProperty: 'text',\n//     numberProperty: 1,\n//     properyProperty: {\n//         name: 'name',\n//         value: 1\n//     }\n// } \n\n// // print modelConst.id\n\n\n// const impliedModel = {\n//     prop1: 1,\n//     prop2: '2'\n// }\n\n\nconst numberListConst: (number or text) list = [1,'t',2,3]\nprint numberListConst\n// const textListConst: text list = ['1', '2', '3']\n// const booleanListConst: boolean list = [true, false, true]\n// const lambdaConst: (x: number) => number = (x) => x + 1\n\n// const nullTextConst: text = null\n// const nullNumberConst: number = null\n// const nullBooleanConst: boolean = null\n// const nullListConst: listof number = null\n\n// const wrongTextConst: text = 1\n// const wrongTextConst: text = true\n// const wrongNumberConst: number = 'text'\n// const wrongNumberConst: number = true\n// const wrongBooleanConst: boolean = 1\n// const wrongBooleanConst: boolean = '1'\n\n// formula add(x: number, y: number) returns number {\n//     // if(true) { return '1' } else { return false }\n//     print 'Hello World'\n//     return x + y\n// }\n\n// const form = add\n\n// print form(1, 2)"}]}